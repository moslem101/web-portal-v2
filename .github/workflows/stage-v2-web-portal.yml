name: Staging V2 RUNNER web-portal CI/CD Staging

# on:
#   push:
#     branches:
#       - main

# RELEASE:Published Trigger 
on:
  release:
    types: [published]

permissions:
  contents: write
  pull-requests: write

env:
  SERVICE_NAME: staging-web-portal-v2
  SERVICE_PORT: 8200
  MAIN_SERVICE_PATH: /opt/staging-moslem101.com/
  SERVICE_PATH: web-portal-v2

jobs:
  # CI Phase: Build and Test
  build-and-test:
    name: CI-phase-BuildTest-Staging
    runs-on: ubuntu-latest
    if: endsWith(github.event.release.tag_name, '-staging') # <-- Filter Tags Staging
    steps:
      - name: Checkout code Latest release tags 
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }} 
          fetch-depth: 0  

      - name: Verifikasi checkout version
        run: |
          echo "Checked out version:"
          git describe --tags
          git branch --show-current
          git status

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install dependencies
        run: yarn install

      - name: Run Linter
        run: yarn lint

      - name: Build project
        run: yarn build

  # CD Phase: Deployment
  delivery-and-deploy:
    name: CD-phase-Deployment-Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: "contains(github.event.release.tag_name, 'staging')" # Hanya jalankan job ini jika tag mengandung "staging"
    steps:
      - name: Checkout code Latest release tags 
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }} 
          fetch-depth: 0  

      - name: Checkout latest release tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  
          fetch-tags: true  
      
      - name: Get latest release tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          echo "Latest release tag: $LATEST_TAG"
          echo "TAG_NAME=$LATEST_TAG" >> $GITHUB_ENV
      
      - name: Checkout latest release
        run: |
          git checkout $TAG_NAME
          git status

      - name: Verifikasi checkout version
        run: |
          echo "Checked out version:"
          git describe --tags
          git branch --show-current
          git status

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DEV_PRIVATE_KEY }}

      - name: Deploy with PM2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SSH_HOST }}
          username: ${{ secrets.DEV_SSH_USERNAME }}
          key: ${{ secrets.DEV_PRIVATE_KEY }}
          port: ${{ secrets.DEV_PORT_SSH }}
          script: |
            cd ${{ env.MAIN_SERVICE_PATH }}/${{ env.SERVICE_PATH }}/

            # Cek apakah service sudah ada di pm2 list
            if pm2 list | grep -q "${{ env.SERVICE_NAME }}"; then
              echo "üîÑ Service ${{ env.SERVICE_NAME }} exists. Restarting..."
              
              # Latest Git Checkout  
              git add .
              git stash

              # Ambil tag terbaru
              git fetch --all --tags
              LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
              echo "Latest release tag: $LATEST_TAG"
              
              # Checkout ke tag terbaru
              git checkout $LATEST_TAG
              git status
              
              # Verifikasi tag setelah checkout
              echo "Checked out version:"
              git describe --tags
              git branch --show-current
              git status
              
              # Build & Install
              yarn install
              yarn build

              pm2 restart ${{ env.SERVICE_NAME }}
              pm2 reload ${{ env.SERVICE_NAME }}
              
              # Lanjutkan ke health check
              sleep 5
              echo "Checking service ..."
              pm2 show ${{ env.SERVICE_NAME }}
            else
              echo "‚ö†Ô∏è Service ${{ env.SERVICE_NAME }} does not exist. Initializing deployment..."

              # Validasi Node.js, Yarn, PM2, dan nc
              if ! command -v node &> /dev/null; then
                echo "‚ö†Ô∏è Node.js is not installed. Installing..."
                curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -
                sudo apt-get install -y nodejs
              fi
              if ! command -v yarn &> /dev/null; then
                echo "‚ö†Ô∏è Yarn is not installed. Installing..."
                npm install -g yarn
              fi
              if ! command -v pm2 &> /dev/null; then
                echo "‚ö†Ô∏è PM2 is not installed. Installing..."
                npm install -g pm2
              fi
              if ! command -v nc &> /dev/null; then
                echo "‚ö†Ô∏è Netcat (nc) is not installed. Installing..."
                sudo apt-get install -y netcat
              fi

              # Latest Git Checkout  
              git add .
              git stash
              
              # Ambil tag terbaru
              git fetch --all --tags
              LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
              echo "Latest release tag: $LATEST_TAG"
              
              # Checkout ke tag terbaru
              git checkout $LATEST_TAG
              git status
              
              # Verifikasi tag setelah checkout
              echo "Checked out version:"
              git describe --tags
              git branch --show-current
              git status
              
              # Build & Install
              yarn install
              yarn build

              pm2 restart ${{ env.SERVICE_NAME }}
              pm2 reload ${{ env.SERVICE_NAME }}

              # Validasi file pm2.config.js
              pm2 reload ${{ env.SERVICE_NAME }}
              cd dist
              if [ ! -f "pm2.config.js" ]; then
                echo "‚ùå File pm2.config.js not found. Exiting..."
                echo "‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è Please Add pm2.config.js Production ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è"
              fi
              echo "‚úÖ pm2.config.js file exists."

              # Ekstrak dan validasi PORT
              CONFIG_PORT=$(grep -oP '(?<="PORT":")[0-9]+' pm2.config.js | head -1)
              echo "Extracted PORT: $CONFIG_PORT"
              if [ "$CONFIG_PORT" != "${{ env.SERVICE_PORT }}" ]; then
                echo "‚ùå Configured PORT ($CONFIG_PORT) does not match expected SERVICE_PORT (${{ env.SERVICE_PORT }}). Exiting..."
              fi
              echo "‚úÖ PORT validation passed."

              # Jalankan service dengan PM2
              pm2 reload ${{ env.SERVICE_NAME }}
              pm2 start pm2.config.js --name ${{ env.SERVICE_NAME }}
              sleep 5
              pm2 show ${{ env.SERVICE_NAME }} 
            fi
            
            # Validasi Status Service
            echo "üìö Validation Service PM2 Status:"
            pm2 list

            # Health Check Service & Validasi PORT local
            echo "üîÑ Checking if port ${{ env.SERVICE_PORT }} is open on localhost..."
            if nc -zv localhost ${{ env.SERVICE_PORT }}; then
              echo "‚úÖ Remote port ${{ env.SERVICE_PORT }} is open."
            else
              echo "‚ùå Remote port ${{ env.SERVICE_PORT }} is closed. Health check failed ‚ö†Ô∏è."
            fi

# Separate job for branch creation
  create-branch:
    name: Create New Branch for Release
    runs-on: ubuntu-latest
    needs: delivery-and-deploy
    if: "contains(github.event.release.tag_name, 'staging')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
          fetch-depth: 0
      
      - name: Verify Checkout
        run: |
          echo "Checked out version:"
          git describe --tags
          git branch --show-current
          git status
      
      # Create and push new branch
      - name: Create and push new branch
        run: |
          BRANCH_NAME="release-${{ github.event.release.tag_name }}"
          echo "Creating branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME" || git checkout "$BRANCH_NAME"
          git status
          
          # Add a commit to ensure the branch has content (if needed)
          echo "# Release ${{ github.event.release.tag_name }}" >> RELEASE_NOTES.md
          git add RELEASE_NOTES.md
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -m "Initialize branch for release ${{ github.event.release.tag_name }}" || echo "No changes to commit"
          
          # Push the branch to remote
          git push -f origin "$BRANCH_NAME"
          echo "Branch $BRANCH_NAME pushed successfully."
  
